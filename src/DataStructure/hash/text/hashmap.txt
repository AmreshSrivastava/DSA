What is HashMap?
Java HashMap is similar to HashTable, but it is unsynchronized. It allows to store the null keys as well, but there should be only one null key object and there can be any number of null values. This class makes no guarantees as to the order of the map. To use this class and its methods, you need to import java.util.HashMap package or its superclass.

K – The type of the keys in the map.
V – The type of values mapped in the map.

Table of Content

What is HashMap?
Java HashMap Examples
HashMap Declaration
Hierarchy of Java HashMap
Creating HashMap in Java
Java HashMap Constructors
Performing Various Operations on HashMap
Complexity of HashMap in Java
Internal Structure of HashMap
Advantages and Disadvantages of Java HashMap



Java HashMap Constructors
HashMap provides 4 constructors and the access modifier of each is public which are listed as follows:

HashMap()
HashMap(int initialCapacity)
HashMap(int initialCapacity, float loadFactor)
HashMap(Map map)

1. HashMap()
It is the default constructor which creates an instance of HashMap with an initial capacity of 16 and a load factor of 0.75.

Syntax:   HashMap<K, V> hm = new HashMap<K, V>();

HashMap Declaration:

public class HashMap<K,V> extends AbstractMap<K,V>  implements Map<K,V>, Cloneable, Serializable

Note: HashMap in Java implements Serializable, Cloneable, Map<K, V> interfaces.Java HashMap extends AbstractMap<K, V> class. The direct subclasses are LinkedHashMap and PrinterStateReasons.


Characteristics of Java HashMap:
A HashMap is a data structure that is used to store and retrieve values based on keys. Some of the key characteristics of a hashmap include:

Fast access time: HashMaps provide constant time access to elements, which means that retrieval and insertion of elements are very fast, usually O(1) time complexity.
Uses hashing function: HashMaps uses a hash function to map keys to indices in an array. This allows for a quick lookup of values based on keys.
Stores key-value pairs: Each element in a HashMap consists of a key-value pair. The key is used to look up the associated value.
Supports null keys and values: HashMaps allow for null values and keys. This means that a null key can be used to store a value, and a null value can be associated with a key.
Not ordered: HashMaps are not ordered, which means that the order in which elements are added to the map is not preserved. However, LinkedHashMap is a variation of HashMap that preserves the insertion order.
Allows duplicates: HashMaps allow for duplicate values, but not duplicate keys. If a duplicate key is added, the previous value associated with the key is overwritten.
Thread-unsafe: HashMaps are not thread-safe, which means that if multiple threads access the same hashmap simultaneously, it can lead to data inconsistencies. If thread safety is required, ConcurrentHashMap can be used.
Capacity and load factor: HashMaps have a capacity, which is the number of elements that it can hold, and a load factor, which is the measure of how full the hashmap can be before it is resized.


Important Features of HashMap
To access a value one must know its key. HashMap is known as HashMap because it uses a technique called Hashing. Hashing is a technique of converting a large String to a small String that represents the same String. A shorter value helps in indexing and faster searches. HashSet also uses HashMap internally.
A few important features of HashMap are: 

HashMap is a part of java.util package.
HashMap extends an abstract class AbstractMap which also provides an incomplete implementation of the Map interface.
It also implements a Cloneable and Serializable interfaces. K and V in the above definition represent Key and Value respectively.
HashMap doesn’t allow duplicate keys but allows duplicate values. That means A single key can’t contain more than 1 value but more than 1 key can contain a single value.
HashMap allows a null key also but only once and multiple null values.
This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. It is roughly similar to HashTable but is unsynchronized.

Internal Structure of HashMap
Internally HashMap contains an array of Node and a node is represented as a class that contains 4 fields: 

int hash
K key
V value
Node next
It can be seen that the node is containing a reference to its own object. So it’s a linked list. 


Performance of HashMap
The performance of HashMap depends on 2 parameters which are named as follows:

Initial Capacity
Load Factor
1. Initial Capacity – It is the capacity of HashMap at the time of its creation (It is the number of buckets a HashMap can hold when the HashMap is instantiated). In java, it is 2^4=16 initially, meaning it can hold 16 key-value pairs.

2. Load Factor – It is the percent value of the capacity after which the capacity of Hashmap is to be increased (It is the percentage fill of buckets after which Rehashing takes place). In java, it is 0.75f by default, meaning the rehashing takes place after filling 75% of the capacity.

3. Threshold – It is the product of Load Factor and Initial Capacity. In java, by default, it is (16 * 0.75 = 12). That is, Rehashing takes place after inserting 12 key-value pairs into the HashMap.

4. Rehashing – It is the process of doubling the capacity of the HashMap after it reaches its Threshold. In java, HashMap continues to rehash(by default) in the following sequence – 2^4, 2^5, 2^6, 2^7, …. so on. 

If the initial capacity is kept higher then rehashing will never be done. But by keeping it higher increases the time complexity of iteration. So it should be chosen very cleverly to increase performance. The expected number of values should be taken into account to set the initial capacity. The most generally preferred load factor value is 0.75 which provides a good deal between time and space costs. The load factor’s value varies between 0 and 1. 

Note: From Java 8 onward, Java has started using Self Balancing BST instead of a linked list for chaining. The advantage of self-balancing bst is, we get the worst case (when every key maps to the same slot) search time is O(Log n). 

Synchronized HashMap
As it is told that HashMap is unsynchronized i.e. multiple threads can access it simultaneously. If multiple threads access this class simultaneously and at least one thread manipulates it structurally then it is necessary to make it synchronized externally. It is done by synchronizing some object which encapsulates the map. If No such object exists then it can be wrapped around Collections.synchronizedMap() to make HashMap synchronized and avoid accidental unsynchronized access. As in the following example: 

Map m = Collections.synchronizedMap(new HashMap(...));
Now the Map m is synchronized.  Iterators of this class are fail-fast if any structure modification is done after the creation of the iterator, in any way except through the iterator’s remove method. In a failure of an iterator, it will throw ConcurrentModificationException.
 

Method : 

clear()                     get()                   values()
clone()                   isEmpty()
compute()                 keySet()
computeIfAbsent()         merge()
computeIfPresent()         put()
containsKey()             putAll()
containsValue()           remove()
entrySet()                size()
  
Methods inherited from class java.util.AbstractMap

equals()
hashCode()
toString()

Methods inherited from interface java.util.Map

equals()
forEach()
getOrDefault()
hashCode()
putIfAbsent()
remove()
replace()
replaceAll()


Advantages of Java HashMap
Fast retrieval: HashMaps provide constant time access to elements, which means that retrieval and insertion of elements is very fast.
Efficient storage: HashMaps use a hashing function to map keys to indices in an array. This allows for quick lookup of values based on keys, and efficient storage of data.
Flexibility: HashMaps allow for null keys and values, and can store key-value pairs of any data type.
Easy to use: HashMaps have a simple interface and can be easily implemented in Java.
Suitable for large data sets: HashMaps can handle large data sets without slowing down.


Disadvantages of Java HashMap
Unordered: HashMaps are not ordered, which means that the order in which elements are added to the map is not preserved.
Not thread-safe: HashMaps are not thread-safe, which means that if multiple threads access the same hashmap simultaneously, it can lead to data inconsistencies.
Performance can degrade: In some cases, if the hashing function is not properly implemented or if the load factor is too high, the performance of a HashMap can degrade.
More complex than arrays or lists: HashMaps can be more complex to understand and use than simple arrays or lists, especially for beginners.
Higher memory usage: Since HashMaps use an underlying array, they can use more memory than other data structures like arrays or lists. This can be a disadvantage if memory usage is a concern.

